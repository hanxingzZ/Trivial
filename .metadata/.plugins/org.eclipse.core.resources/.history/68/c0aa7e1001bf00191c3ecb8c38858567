package leetCode;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

public class ValidParentheses {
	public boolean isValid(String s) {
		if (s == null) {
			return true;
		}
		char[] cArr = s.toCharArray();
		Stack<Character> stack = new Stack<>();
		for (int i = 0; i < cArr.length; i++) {
			if (isLeft(cArr[i])) {
				stack.push(cArr[i]);
			} else {
				if (stack.isEmpty() || !isMatch(stack.pop(), cArr[i])) {
					return false;
				}
			}
		}
		return stack.empty();
	}

	private boolean isLeft(char c) {
		return c == '(' || c == '{' || c == '[';
	}

	private boolean isMatch(char c1, char c2) {
		return (c1 == '(' && c2 == ')') || (c1 == '{' && c2 == '}') || (c1 == '[' && c2 == ']');
	}

	public static void main(String[] args) throws ClassNotFoundException {
		String s = "()";
		String s1 = "()[]{}";
		String s2 = "(]";
		String s3 = "([)]";
		String s4 = "{[]}";
		ValidParentheses a = new ValidParentheses();
		System.out.println(a.isValid(s));
		System.out.println(a.isValid(s1));
		System.out.println(a.isValid(s2));
		System.out.println(a.isValid(s3));
		System.out.println(a.isValid(s4));
		Class vc = ValidParentheses.class;
		Class vc1 = new ValidParentheses().getClass();
		Class vc2 = Class.forName("leetCode.ValidParentheses");
		System.out.println(vc == vc1);

	}

}
